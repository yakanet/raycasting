{"version":3,"file":"index-CxbpSZ59.js","sources":["../../src/common.mts","../../src/renderer.wasm?init","../../src/client.mts"],"sourcesContent":["export const SERVER_PORT = 6970;\nexport const PLAYER_SIZE = 0.5;\nexport const PLAYER_SPEED = 2;\nexport const PLAYER_RADIUS = 0.5;\nexport const BOMB_LIFETIME = 2;\nexport const BOMB_THROW_VELOCITY = 5;\nexport const BOMB_GRAVITY = 10;\nexport const BOMB_DAMP = 0.8;\nexport const BOMB_SCALE = 0.25;\n\nexport class RGBA {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n    constructor(r: number, g: number, b: number, a: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n        this.a = a;\n    }\n    toStyle(): string {\n        return `rgba(`\n            +`${Math.floor(this.r*255)}, `\n            +`${Math.floor(this.g*255)}, `\n            +`${Math.floor(this.b*255)}, `\n            +`${this.a})`;\n    }\n}\n\nexport class Vector2 {\n    x: number;\n    y: number;\n    constructor(x: number = 0, y: number = 0) {\n        this.x = x;\n        this.y = y;\n    }\n    setPolar(angle: number, len: number = 1): this {\n        this.x = Math.cos(angle)*len;\n        this.y = Math.sin(angle)*len;\n        return this;\n    }\n    clone(): Vector2 {\n        return new Vector2(this.x, this.y)\n    }\n    copy(that: Vector2): this {\n        this.x = that.x;\n        this.y = that.y;\n        return this;\n    }\n    set(x: number, y: number): this {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    setScalar(scalar: number): this {\n        this.x = scalar;\n        this.y = scalar;\n        return this;\n    }\n    add(that: Vector2): this {\n        this.x += that.x;\n        this.y += that.y;\n        return this;\n    }\n    sub(that: Vector2): this {\n        this.x -= that.x;\n        this.y -= that.y;\n        return this;\n    }\n    div(that: Vector2): this {\n        this.x /= that.x;\n        this.y /= that.y;\n        return this;\n    }\n    mul(that: Vector2): this {\n        this.x *= that.x;\n        this.y *= that.y;\n        return this;\n    }\n    sqrLength(): number {\n        return this.x*this.x + this.y*this.y;\n    }\n    length(): number {\n        return Math.sqrt(this.sqrLength());\n    }\n    angle(): number {\n        return Math.atan2(this.y, this.x);\n    }\n    scale(value: number): this {\n        this.x *= value;\n        this.y *= value;\n        return this;\n    }\n    norm(): this {\n        const l = this.length();\n        return l === 0 ? this : this.scale(1/l);\n    }\n    rot90(): this {\n        const oldX = this.x;\n        this.x = -this.y;\n        this.y = oldX;\n        return this;\n    }\n    sqrDistanceTo(that: Vector2): number {\n        const dx = that.x - this.x;\n        const dy = that.y - this.y;\n        return dx*dx + dy*dy;\n    }\n    distanceTo(that: Vector2): number {\n        return Math.sqrt(this.sqrDistanceTo(that));\n    }\n    lerp(that: Vector2, t: number): this {\n        this.x += (that.x - this.x)*t;\n        this.y += (that.y - this.y)*t;\n        return this;\n    }\n    dot(that: Vector2): number {\n        return this.x*that.x + this.y*that.y;\n    }\n    map(f: (x: number) => number): this {\n        this.x = f(this.x);\n        this.y = f(this.y);\n        return this;\n    }\n}\n\nexport class Vector3 {\n    x: number;\n    y: number;\n    z: number;\n    constructor(x: number = 0, y: number = 0, z: number = 0) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    clone(): Vector3 {\n        return new Vector3(this.x, this.y, this.z)\n    }\n    clone2(): Vector2 {\n        return new Vector2(this.x, this.y)\n    }\n    copy(that: Vector3): this {\n        this.x = that.x;\n        this.y = that.y;\n        this.z = that.z;\n        return this;\n    }\n    copy2(that: Vector2, z: number): this {\n        this.x = that.x;\n        this.y = that.y;\n        this.z = z;\n        return this;\n    }\n    setScalar(scalar: number): this {\n        this.x = scalar;\n        this.y = scalar;\n        this.z = scalar;\n        return this;\n    }\n    add(that: Vector3): this {\n        this.x += that.x;\n        this.y += that.y;\n        this.z += that.z;\n        return this;\n    }\n    sub(that: Vector3): this {\n        this.x -= that.x;\n        this.y -= that.y;\n        this.z -= that.z;\n        return this;\n    }\n    div(that: Vector3): this {\n        this.x /= that.x;\n        this.y /= that.y;\n        this.z /= that.z;\n        return this;\n    }\n    mul(that: Vector3): this {\n        this.x *= that.x;\n        this.y *= that.y;\n        this.z *= that.z;\n        return this;\n    }\n    sqrLength(): number {\n        return this.x*this.x + this.y*this.y + this.z*this.z;\n    }\n    length(): number {\n        return Math.sqrt(this.sqrLength());\n    }\n    scale(value: number): this {\n        this.x *= value;\n        this.y *= value;\n        this.z *= value;\n        return this;\n    }\n    norm(): this {\n        const l = this.length();\n        return l === 0 ? this : this.scale(1/l);\n    }\n    sqrDistanceTo(that: Vector3): number {\n        const dx = that.x - this.x;\n        const dy = that.y - this.y;\n        const dz = that.z - this.z;\n        return dx*dx + dy*dy + dz*dz;\n    }\n    distanceTo(that: Vector3): number {\n        return Math.sqrt(this.sqrDistanceTo(that));\n    }\n    lerp(that: Vector3, t: number): this {\n        this.x += (that.x - this.x)*t;\n        this.y += (that.y - this.y)*t;\n        this.z += (that.z - this.z)*t;\n        return this;\n    }\n    dot(that: Vector3): number {\n        return this.x*that.x + this.y*that.y + this.z*that.z;\n    }\n    map(f: (x: number) => number): this {\n        this.x = f(this.x);\n        this.y = f(this.y);\n        this.z = f(this.z);\n        return this;\n    }\n}\n\nexport enum Moving {\n    MovingForward,\n    MovingBackward,\n    TurningLeft,\n    TurningRight,\n    Count,\n}\n\nexport interface Player {\n    id: number,\n    position: Vector2,\n    direction: number,\n    moving: number,\n    hue: number,\n}\n\nexport enum MessageKind {\n    Hello,\n    PlayerJoined,\n    PlayerLeft,\n    PlayerMoving,\n    AmmaMoving,\n    AmmaThrowing,\n    Ping,\n    Pong,\n    ItemSpawned,\n    ItemCollected,\n    BombSpawned,\n    BombExploded,\n}\n\ninterface Field {\n    offset: number,\n    size: number,\n    read(view: DataView): number;\n    write(view: DataView, value: number): void;\n}\n\nexport const UINT8_SIZE = 1;\nexport const UINT16_SIZE = 2;\nexport const UINT32_SIZE = 4;\nexport const FLOAT32_SIZE = 4;\n\nfunction allocUint8Field(allocator: { size: number }): Field {\n    const offset = allocator.size;\n    const size = UINT8_SIZE;\n    allocator.size += size;\n    return {\n        offset,\n        size,\n        read: (view) => view.getUint8(offset),\n        write: (view, value) => view.setUint8(offset, value)\n    }\n}\n\n\n//@ts-ignore\nfunction allocUint16Field(allocator: { size: number }): Field {\n    const offset = allocator.size;\n    const size = UINT16_SIZE;\n    allocator.size += size;\n    return {\n        offset,\n        size,\n        read: (view) => view.getUint16(offset),\n        write: (view, value) => view.setUint16(offset, value)\n    }\n}\n\nfunction allocUint32Field(allocator: { size: number }): Field {\n    const offset = allocator.size;\n    const size = UINT32_SIZE;\n    allocator.size += size;\n    return {\n        offset,\n        size,\n        read: (view) => view.getUint32(offset, true),\n        write: (view, value) => view.setUint32(offset, value, true)\n    }\n}\n\nfunction allocFloat32Field(allocator: { size: number }): Field {\n    const offset = allocator.size;\n    const size = FLOAT32_SIZE;\n    allocator.size += size;\n    return {\n        offset,\n        size,\n        read: (view) => view.getFloat32(offset, true),\n        write: (view, value) => view.setFloat32(offset, value, true)\n    }\n}\n\nfunction verifier(kindField: Field, kind: number, size: number): (view: DataView) => boolean {\n    return (view) =>\n        view.byteLength == size &&\n        kindField.read(view) == kind\n}\n\n// TODO: Batch up the Item messages\nexport const ItemCollectedStruct = (() => {\n    const allocator = { size: 0 };\n    const kind      = allocUint8Field(allocator);\n    const index     = allocUint32Field(allocator);\n    const size      = allocator.size;\n    const verify    = verifier(kind, MessageKind.ItemCollected, size);\n    return {kind, index, size, verify};\n})();\n\nexport const BombSpawnedStruct = (() => {\n    const allocator = { size: 0 };\n    const kind     = allocUint8Field(allocator);\n    const index    = allocUint32Field(allocator);\n    const x        = allocFloat32Field(allocator);\n    const y        = allocFloat32Field(allocator);\n    const z        = allocFloat32Field(allocator);\n    const dx       = allocFloat32Field(allocator);\n    const dy       = allocFloat32Field(allocator);\n    const dz       = allocFloat32Field(allocator);\n    const lifetime = allocFloat32Field(allocator);\n    const size     = allocator.size;\n    const verify   = verifier(kind, MessageKind.BombSpawned, size);\n    return {kind, index, x, y, z, dx, dy, dz, lifetime, size, verify};\n})();\n\nexport const BombExplodedStruct = (() => {\n    const allocator = { size: 0 };\n    const kind     = allocUint8Field(allocator);\n    const index    = allocUint32Field(allocator);\n    const x        = allocFloat32Field(allocator);\n    const y        = allocFloat32Field(allocator);\n    const z        = allocFloat32Field(allocator);\n    const size     = allocator.size;\n    const verify   = verifier(kind, MessageKind.BombExploded, size);\n    return {kind, index, x, y, z, size, verify};\n})();\n\nexport const ItemSpawnedStruct = (() => {\n    const allocator = { size: 0 };\n    const kind     = allocUint8Field(allocator);\n    const itemKind = allocUint8Field(allocator);\n    const index    = allocUint32Field(allocator);\n    const x        = allocFloat32Field(allocator);\n    const y        = allocFloat32Field(allocator);\n    const size     = allocator.size;\n    const verify   = verifier(kind, MessageKind.ItemSpawned, size);\n    return {kind, itemKind, index, x, y, size, verify};\n})();\n\nexport const PingStruct = (() => {\n    const allocator = { size: 0 };\n    const kind      = allocUint8Field(allocator);\n    const timestamp = allocUint32Field(allocator);\n    const size      = allocator.size;\n    const verify    = verifier(kind, MessageKind.Ping, size);\n    return {kind, timestamp, size, verify}\n})();\n\nexport const PongStruct = (() => {\n    const allocator = { size: 0 };\n    const kind      = allocUint8Field(allocator);\n    const timestamp = allocUint32Field(allocator);\n    const size      = allocator.size;\n    const verify    = verifier(kind, MessageKind.Pong, size);\n    return {kind, timestamp, size, verify}\n})();\n\nexport const HelloStruct = (() => {\n    const allocator = { size: 0 };\n    const kind     = allocUint8Field(allocator);\n    const id       = allocUint32Field(allocator);\n    const x        = allocFloat32Field(allocator);\n    const y        = allocFloat32Field(allocator);\n    const direction = allocFloat32Field(allocator);\n    const hue      = allocUint8Field(allocator);\n    const size     = allocator.size;\n    const verify = verifier(kind, MessageKind.Hello, size);\n    return {kind, id, x, y, direction, hue, size, verify}\n})();\n\nexport const AmmaMovingStruct = (() => {\n    const allocator = { size: 0 };\n    const kind      = allocUint8Field(allocator);\n    const direction = allocUint8Field(allocator);\n    const start     = allocUint8Field(allocator);\n    const size      = allocator.size;\n    const verify    = verifier(kind, MessageKind.AmmaMoving, size);\n    return {kind, direction, start, size, verify}\n})();\n\nexport const AmmaThrowingStruct = (() => {\n    const allocator = { size: 0 };\n    const kind      = allocUint8Field(allocator);\n    const size      = allocator.size;\n    const verify    = verifier(kind, MessageKind.AmmaThrowing, size);\n    return {kind, size, verify}\n})();\n\n// [kind] [count] [id] [x] [y] [moving] [id] [x] [y] [moving] [id] [x] [y] [moving]\n//                ^\n\nexport const PlayerStruct = (() => {\n    const allocator = { size: 0 };\n    const id     = allocUint32Field(allocator);\n    const x      = allocFloat32Field(allocator);\n    const y      = allocFloat32Field(allocator);\n    const direction = allocFloat32Field(allocator);\n    const hue    = allocUint8Field(allocator);\n    const moving = allocUint8Field(allocator);\n    const size   = allocator.size;\n    return {id, x, y, direction, hue, moving, size};\n})();\n\nexport const PlayersJoinedHeaderStruct = (() => {\n    const allocator = { size: 0 };\n    const kind   = allocUint8Field(allocator);\n    const size   = allocator.size;\n    const itemSize = PlayerStruct.size;\n    const verify = (view: DataView) =>\n        view.byteLength >= size &&\n        (view.byteLength - size)%itemSize === 0 &&\n        kind.read(view) == MessageKind.PlayerJoined;\n    const count = (view: DataView) => (view.byteLength - size)/itemSize\n    return {kind, count, size, verify};\n})();\n\nexport const PlayersMovingHeaderStruct = (() => {\n    const allocator = { size: 0 };\n    const kind   = allocUint8Field(allocator);\n    const size   = allocator.size;\n    const itemSize = PlayerStruct.size;\n    const verify = (view: DataView) =>\n        view.byteLength >= size &&\n        (view.byteLength - size)%itemSize === 0 &&\n        kind.read(view) == MessageKind.PlayerMoving;\n    const count = (view: DataView) => (view.byteLength - size)/itemSize;\n    return {kind, count, size, verify};\n})();\n\nexport const PlayersLeftHeaderStruct = (() => {\n    const allocator = { size: 0 };\n    const kind = allocUint8Field(allocator);\n    const headerSize = allocator.size;\n    const itemSize = UINT32_SIZE;\n    const items = (index: number) => {\n        return {\n            id: {\n                read: (view: DataView): number => view.getUint32(headerSize + index*itemSize, true),\n                write: (view: DataView, value: number): void => view.setUint32(headerSize + index*itemSize, value, true)\n            }\n        }\n    }\n    const verify = (view: DataView) =>\n        view.byteLength >= headerSize &&\n        (view.byteLength - headerSize)%itemSize === 0 &&\n        kind.read(view) === MessageKind.PlayerLeft;\n    const allocateAndInit = (countItems: number): DataView => {\n        const buffer = new ArrayBuffer(headerSize + itemSize*countItems);\n        const view = new DataView(buffer);\n        kind.write(view, MessageKind.PlayerLeft);\n        return view;\n    }\n    const count = (view: DataView) => (view.byteLength - headerSize)/itemSize\n    return {kind, count, items, itemSize, headerSize, verify, allocateAndInit};\n})();\n\n// It's such mod that properMod(-1, 100) === 99\nexport function properMod(a: number, b: number): number {\n    return (a%b + b)%b;\n}\n\nexport function clamp(value: number, min: number, max: number) {\n    return Math.min(Math.max(value, min), max);\n}\n\nexport interface Scene {\n    walls: Array<boolean>;\n    width: number;\n    height: number;\n}\n\nexport function sceneContains(scene: Scene, p: Vector2): boolean {\n    return 0 <= p.x && p.x < scene.width && 0 <= p.y && p.y < scene.height;\n}\n\nexport function sceneGetTile(scene: Scene, p: Vector2): boolean {\n    if (!sceneContains(scene, p)) return false;\n    return scene.walls[Math.floor(p.y)*scene.width + Math.floor(p.x)];\n}\n\nexport function sceneCanRectangleFitHere(scene: Scene, px: number, py: number, sx: number, sy: number): boolean {\n    const x1 = Math.floor(px - sx*0.5);\n    const x2 = Math.floor(px + sx*0.5);\n    const y1 = Math.floor(py - sy*0.5);\n    const y2 = Math.floor(py + sy*0.5);\n    for (let x = x1; x <= x2; ++x) {\n        for (let y = y1; y <= y2; ++y) {\n            if (sceneGetTile(scene, new Vector2(x, y))) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nexport function createScene(walls: Array<Array<boolean>>): Scene {\n    const scene: Scene = {\n        height: walls.length,\n        width: Number.MIN_VALUE,\n        walls: [],\n    };\n    for (let row of walls) {\n        scene.width = Math.max(scene.width, row.length);\n    }\n    for (let row of walls) {\n        scene.walls = scene.walls.concat(row);\n        for (let i = 0; i < scene.width - row.length; ++i) {\n            scene.walls.push(false);\n        }\n    }\n    return scene;\n}\n\nexport enum ItemKind {\n    Key,\n    Bomb,\n}\n\nexport interface Item {\n    alive: boolean,\n    kind: ItemKind,\n    position: Vector2,\n}\n\nexport function collectItem(player: Player, item: Item): boolean {\n    if (item.alive) {\n        if (player.position.sqrDistanceTo(item.position) < PLAYER_RADIUS*PLAYER_RADIUS) {\n            item.alive = false;\n            return true;\n        }\n    }\n    return false;\n}\n\nexport interface Bomb {\n    position: Vector3,\n    velocity: Vector3,\n    lifetime: number,\n}\n\nexport function allocateBombs(capacity: number): Array<Bomb> {\n    let bomb: Array<Bomb> = []\n    for (let i = 0; i < capacity; ++i) {\n        bomb.push({\n            position: new Vector3(),\n            velocity: new Vector3(),\n            lifetime: 0,\n        })\n    }\n    return bomb\n}\n\nexport function throwBomb(player: Player, bombs: Array<Bomb>): number | null {\n    for (let index = 0; index < bombs.length; ++index) {\n        const bomb = bombs[index];\n        if (bomb.lifetime <= 0) {\n            bomb.lifetime = BOMB_LIFETIME;\n            bomb.position.copy2(player.position, 0.6);\n            bomb.velocity.x = Math.cos(player.direction);\n            bomb.velocity.y = Math.sin(player.direction);\n            bomb.velocity.z = 0.5;\n            bomb.velocity.scale(BOMB_THROW_VELOCITY);\n            return index;\n        }\n    }\n    return null;\n}\n\nexport function updateBomb(bomb: Bomb, scene: Scene, deltaTime: number): boolean {\n    let collided = false;\n    bomb.lifetime -= deltaTime;\n    bomb.velocity.z -= BOMB_GRAVITY*deltaTime;\n\n    const nx = bomb.position.x + bomb.velocity.x*deltaTime;\n    const ny = bomb.position.y + bomb.velocity.y*deltaTime;\n    if (sceneGetTile(scene, new Vector2(nx, ny))) {\n        const dx = Math.abs(Math.floor(bomb.position.x) - Math.floor(nx));\n        const dy = Math.abs(Math.floor(bomb.position.y) - Math.floor(ny));\n        \n        if (dx > 0) bomb.velocity.x *= -1;\n        if (dy > 0) bomb.velocity.y *= -1;\n        bomb.velocity.scale(BOMB_DAMP);\n        if (bomb.velocity.length() > 1) collided = true; // Wall collision\n    } else {\n        bomb.position.x = nx;\n        bomb.position.y = ny;\n    }\n\n    const nz = bomb.position.z + bomb.velocity.z*deltaTime;\n    if (nz < BOMB_SCALE || nz > 1.0) {\n        bomb.velocity.z *= -1\n        bomb.velocity.scale(BOMB_DAMP);\n        if (bomb.velocity.length() > 1) collided = true; // Floor collision\n    } else {\n        bomb.position.z = nz;\n    }\n    return collided;\n}\n\n// NOTE: This is basically the part of the state of the Game that is shared \n// between Client and Server and constantly synced over the network.\nexport interface Level {\n    scene: Scene,\n    items: Array<Item>,\n    bombs: Array<Bomb>,\n}\n\nexport function createLevel(): Level {\n    const scene = createScene([\n        [ false, false, true, true, true, false, false],\n        [ false, false, false, false, false, true, false],\n        [ true, false, false, false, false, true, false],\n        [ true,  false, false, false, false, true, false],\n        [ true],\n        [  false,  true, true, true, false, false, false],\n        [  false,  false, false, false, false, false, false],\n    ]);\n\n    const items: Array<Item> = [\n        {\n            kind: ItemKind.Bomb,\n            position: new Vector2(1.5, 3.5),\n            alive: true,\n        },\n        {\n            kind: ItemKind.Key,\n            position: new Vector2(2.5, 1.5),\n            alive: true,\n        },\n        {\n            kind: ItemKind.Key,\n            position: new Vector2(3, 1.5),\n            alive: true,\n        },\n        {\n            kind: ItemKind.Key,\n            position: new Vector2(3.5, 1.5),\n            alive: true,\n        },\n        {\n            kind: ItemKind.Key,\n            position: new Vector2(4.0, 1.5),\n            alive: true,\n        },\n        {\n            kind: ItemKind.Key,\n            position: new Vector2(4.5, 1.5),\n            alive: true,\n        },\n    ]\n\n    const bombs = allocateBombs(20);\n\n    return {scene, items, bombs};\n}\n\nexport function updatePlayer(player: Player, scene: Scene, deltaTime: number) {\n    const controlVelocity = new Vector2();\n    let angularVelocity = 0.0;\n    if ((player.moving>>Moving.MovingForward)&1) {\n        controlVelocity.add(new Vector2().setPolar(player.direction, PLAYER_SPEED))\n    }\n    if ((player.moving>>Moving.MovingBackward)&1) {\n        controlVelocity.sub(new Vector2().setPolar(player.direction, PLAYER_SPEED))\n    }\n    if ((player.moving>>Moving.TurningLeft)&1) {\n        angularVelocity -= Math.PI;\n    }\n    if ((player.moving>>Moving.TurningRight)&1) {\n        angularVelocity += Math.PI;\n    }\n    player.direction = player.direction + angularVelocity*deltaTime;\n\n    const nx = player.position.x + controlVelocity.x*deltaTime;\n    if (sceneCanRectangleFitHere(scene, nx, player.position.y, PLAYER_SIZE, PLAYER_SIZE)) {\n        player.position.x = nx;\n    }\n    const ny = player.position.y + controlVelocity.y*deltaTime;\n    if (sceneCanRectangleFitHere(scene, player.position.x, ny, PLAYER_SIZE, PLAYER_SIZE)) {\n        player.position.y = ny;\n    }\n}\n","\nimport initWasm from \"\u0000vite/wasm-helper.js\"\nexport default opts => initWasm(opts, \"__VITE_ASSET__BgKvoDgJ__$_?init__\")\n","/// <reference types=\"vite/client\" />\nimport * as common from './common.mjs';\nimport {\n    RGBA, Vector2, Vector3, Scene, Player,\n    sceneGetTile, updatePlayer,\n    PLAYER_SIZE, SERVER_PORT,\n    clamp, properMod\n} from './common.mjs';\nimport createRenderer from \"./renderer.wasm?init\";\n\nconst EPS = 1e-6;\nconst NEAR_CLIPPING_PLANE = 0.1;\nconst FAR_CLIPPING_PLANE = 10.0;\nconst FOV = Math.PI*0.5;\n\nconst SCREEN_FACTOR = 30;\nconst SCREEN_WIDTH = Math.floor(16*SCREEN_FACTOR);\nconst SCREEN_HEIGHT = Math.floor(9*SCREEN_FACTOR);\n\nconst ITEM_FREQ = 0.7;\nconst ITEM_AMP = 0.07;\n\nconst BOMB_PARTICLE_COUNT = 50\n\nconst PARTICLE_LIFETIME = 1.0;\nconst PARTICLE_DAMP = 0.8;\nconst PARTICLE_SCALE = 0.05;\nconst PARTICLE_MAX_SPEED = 8;\nconst PARTICLE_COLOR = new RGBA(1, 0.5, 0.15, 1);\n\nconst MINIMAP = false;\nconst MINIMAP_SPRITES = true;\nconst MINIMAP_SPRITE_SIZE = 0.2;\nconst MINIMAP_SCALE = 0.07;\n\nconst SPRITE_ANGLES_COUNT = 8;\n\nconst CONTROL_KEYS: {[key: string]: common.Moving} = {\n    'ArrowLeft'  : common.Moving.TurningLeft,\n    'ArrowRight' : common.Moving.TurningRight,\n    'ArrowUp'    : common.Moving.MovingForward,\n    'ArrowDown'  : common.Moving.MovingBackward,\n    'KeyA'       : common.Moving.TurningLeft,\n    'KeyD'       : common.Moving.TurningRight,\n    'KeyW'       : common.Moving.MovingForward,\n    'KeyS'       : common.Moving.MovingBackward,\n};\n\ninterface SpritePool {\n    items: Array<Sprite>,\n    length: number,\n}\n\nfunction createSpritePool(): SpritePool {\n    return {\n        items: [],\n        length: 0,\n    }\n}\n\nfunction resetSpritePool(spritePool: SpritePool) {\n    spritePool.length = 0;\n}\n\nfunction strokeLine(ctx: CanvasRenderingContext2D, p1: Vector2, p2: Vector2) {\n    ctx.beginPath();\n    ctx.moveTo(p1.x, p1.y);\n    ctx.lineTo(p2.x, p2.y);\n    ctx.stroke();\n}\n\nfunction snap(x: number, dx: number): number {\n    if (dx > 0) return Math.ceil(x + Math.sign(dx)*EPS);\n    if (dx < 0) return Math.floor(x + Math.sign(dx)*EPS);\n    return x;\n}\n\nfunction hittingCell(p1: Vector2, p2: Vector2): Vector2 {\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    return new Vector2(Math.floor(p2.x + Math.sign(dx)*EPS),\n                       Math.floor(p2.y + Math.sign(dy)*EPS));\n}\n\nfunction rayStep(p1: Vector2, p2: Vector2): Vector2 {\n    // y = k*x + c\n    // x = (y - c)/k\n    //\n    // p1 = (x1, y1)\n    // p2 = (x2, y2)\n    //\n    // | y1 = k*x1 + c\n    // | y2 = k*x2 + c\n    //\n    // dy = y2 - y1\n    // dx = x2 - x1\n    // c = y1 - k*x1\n    // k = dy/dx\n    let p3 = p2.clone();\n    const dx = p2.x - p1.x;\n    const dy = p2.y - p1.y;\n    if (dx !== 0) {\n        const k = dy/dx;\n        const c = p1.y - k*p1.x;\n\n        {\n            const x3 = snap(p2.x, dx);\n            const y3 = x3*k + c;\n            p3.set(x3, y3);\n        }\n\n        if (k !== 0) {\n            const y3 = snap(p2.y, dy);\n            const x3 = (y3 - c)/k;\n            const p3t = new Vector2(x3, y3);\n            if (p2.sqrDistanceTo(p3t) < p2.sqrDistanceTo(p3)) {\n                p3.copy(p3t);\n            }\n        }\n    } else {\n        const y3 = snap(p2.y, dy);\n        const x3 = p2.x;\n        p3.set(x3, y3);\n    }\n\n    return p3;\n}\n\ntype Tile = RGBA | ImageData | null;\n\nfunction castRay(scene: Scene, p1: Vector2, p2: Vector2): Vector2 {\n    let start = p1;\n    while (start.sqrDistanceTo(p1) < FAR_CLIPPING_PLANE*FAR_CLIPPING_PLANE) {\n        const c = hittingCell(p1, p2);\n        if (sceneGetTile(scene, c)) break;\n        const p3 = rayStep(p1, p2);\n        p1 = p2;\n        p2 = p3;\n    }\n    return p2;\n}\n\ninterface Camera {\n    position: Vector2;\n    direction: number;\n    fovLeft: Vector2;\n    fovRight: Vector2;\n}\n\nfunction renderMinimap(ctx: CanvasRenderingContext2D, camera: Camera, player: Player, scene: Scene, spritePool: SpritePool, visibleSprites: Array<Sprite>) {\n    ctx.save();\n\n    // A couple of temporary vectors\n    const p1 = new Vector2();\n    const p2 = new Vector2();\n\n    const cellSize = ctx.canvas.width*MINIMAP_SCALE;\n\n    ctx.translate(ctx.canvas.width*0.03, ctx.canvas.height*0.03);\n    ctx.scale(cellSize, cellSize);\n\n    ctx.fillStyle = \"#181818\";\n    ctx.fillRect(0, 0, scene.width, scene.height);\n\n    ctx.lineWidth = 0.05;\n    for (let y = 0; y < scene.height; ++y) {\n        for (let x = 0; x < scene.width; ++x) {\n            if (sceneGetTile(scene, p1.set(x, y))) {\n                ctx.fillStyle = \"blue\";\n                ctx.fillRect(x, y, 1, 1);\n            }\n        }\n    }\n\n    // Grid\n    ctx.strokeStyle = \"#303030\";\n    for (let x = 0; x <= scene.width; ++x) {\n        strokeLine(ctx, p1.set(x, 0), p2.set(x, scene.height));\n    }\n    for (let y = 0; y <= scene.height; ++y) {\n        strokeLine(ctx, p1.set(0, y), p2.set(scene.width, y));\n    }\n\n    ctx.fillStyle = \"magenta\";\n    ctx.fillRect(player.position.x - PLAYER_SIZE*0.5,\n                 player.position.y - PLAYER_SIZE*0.5,\n                 PLAYER_SIZE, PLAYER_SIZE);\n\n    ctx.strokeStyle = \"magenta\";\n    strokeLine(ctx, camera.fovLeft, camera.fovRight);\n    strokeLine(ctx, camera.position, camera.fovLeft);\n    strokeLine(ctx, camera.position, camera.fovRight);\n\n    if (MINIMAP_SPRITES) {\n        ctx.strokeStyle = \"yellow\";\n        ctx.fillStyle = \"white\"\n        for (let i = 0; i < spritePool.length; ++i) {\n            const sprite = spritePool.items[i];\n            ctx.fillRect(sprite.position.x - MINIMAP_SPRITE_SIZE*0.5,\n                         sprite.position.y - MINIMAP_SPRITE_SIZE*0.5,\n                         MINIMAP_SPRITE_SIZE, MINIMAP_SPRITE_SIZE);\n\n        }\n\n        const sp = new Vector2();\n        for (let sprite of visibleSprites) {\n            strokeLine(ctx, player.position, sprite.position);\n            sp.copy(sprite.position).sub(player.position).norm().scale(sprite.dist).add(player.position);\n            ctx.fillRect(sp.x - MINIMAP_SPRITE_SIZE*0.5,\n                         sp.y - MINIMAP_SPRITE_SIZE*0.5,\n                         MINIMAP_SPRITE_SIZE, MINIMAP_SPRITE_SIZE);\n        }\n    }\n\n    ctx.restore();\n}\n\nfunction renderDebugInfo(ctx: CanvasRenderingContext2D, deltaTime: number, game: Game) {\n    const fontSize = 28;\n    ctx.font = `${fontSize}px bold`\n\n    game.dts.push(deltaTime);\n    if (game.dts.length > 60) // can be any number of frames\n        game.dts.shift();\n\n    const dtAvg = game.dts.reduce((a, b) => a + b, 0)/game.dts.length;\n\n    const labels: string[] = [];\n    labels.push(`FPS: ${Math.floor(1/dtAvg)}`)\n    switch (game.ws.readyState) {\n        case WebSocket.CONNECTING: {\n            labels.push('Connecting...');\n        } break;\n        case WebSocket.OPEN: {\n            labels.push(`Ping: ${game.ping.toFixed(2)}ms`);\n            labels.push(`Players: ${game.players.size}`);\n        } break;\n        case WebSocket.CLOSING:\n        case WebSocket.CLOSED: {\n            labels.push(`Offline`);\n        } break;\n    }\n\n    const shadowOffset = fontSize*0.06\n    const padding = 70\n    for (let i = 0; i < labels.length; ++i) {\n        ctx.fillStyle = \"black\"\n        ctx.fillText(labels[i], padding, padding + fontSize*i);\n        ctx.fillStyle = \"white\"\n        ctx.fillText(labels[i], padding + shadowOffset, padding - shadowOffset + fontSize*i);\n    }\n}\n\nfunction renderColumnOfWall(display: Display, cell: Tile, x: number, p: Vector2, c: Vector2) {\n    if (cell instanceof RGBA) {\n        const stripHeight = display.backImageHeight/display.zBuffer[x];\n        const shadow = 1/display.zBuffer[x]*2;\n        for (let dy = 0; dy < Math.ceil(stripHeight); ++dy) {\n            const y = Math.floor((display.backImageHeight - stripHeight)*0.5) + dy;\n            const destP = (y*display.backImageWidth + x)*4;\n            display.backImageData[destP + 0] = cell.r*shadow*255;\n            display.backImageData[destP + 1] = cell.g*shadow*255;\n            display.backImageData[destP + 2] = cell.b*shadow*255;\n        }\n    } else if (cell instanceof ImageData) {\n        const stripHeight = display.backImageHeight/display.zBuffer[x];\n\n        let u = 0;\n        const t = p.clone().sub(c);\n        if (Math.abs(t.x) < EPS && t.y > 0) {\n            u = t.y;\n        } else if (Math.abs(t.x - 1) < EPS && t.y > 0) {\n            u = 1 - t.y;\n        } else if (Math.abs(t.y) < EPS && t.x > 0) {\n            u = 1 - t.x;\n        } else {\n            u = t.x;\n        }\n\n        const y1f = (display.backImageHeight - stripHeight) * 0.5; \n        const y1 = Math.ceil(y1f);\n        const y2 = Math.floor(y1 + stripHeight);\n        const by1 = Math.max(0, y1);\n        const by2 = Math.min(display.backImageHeight, y2);\n        const tx = Math.floor(u*cell.width);\n        const sh = cell.height / stripHeight;\n        const shadow = Math.min(1/display.zBuffer[x]*4, 1);\n        for (let y = by1; y < by2; ++y) {\n            const ty = Math.floor((y - y1f)*sh);\n            const destP = (y*display.backImageWidth + x)*4;\n            const srcP = (ty*cell.width + tx)*4;\n            display.backImageData[destP + 0] = cell.data[srcP + 0]*shadow;\n            display.backImageData[destP + 1] = cell.data[srcP + 1]*shadow;\n            display.backImageData[destP + 2] = cell.data[srcP + 2]*shadow;\n        }\n    }\n}\n\nfunction renderWalls(display: Display, assets: Assets, camera: Camera, scene: Scene) {\n    const d = new Vector2().setPolar(camera.direction)\n    for (let x = 0; x < display.backImageWidth; ++x) {\n        const p = castRay(scene, camera.position, camera.fovLeft.clone().lerp(camera.fovRight, x/display.backImageWidth));\n        const c = hittingCell(camera.position, p);\n        const v = p.clone().sub(camera.position);\n        display.zBuffer[x] = v.dot(d);\n        if (sceneGetTile(scene, c)) {\n            renderColumnOfWall(display, assets.wallImageData, x, p, c);\n        }\n    }\n}\n\ninterface Display {\n    ctx: CanvasRenderingContext2D;\n    backCtx: OffscreenCanvasRenderingContext2D;\n    backImageData: Uint8ClampedArray;\n    backImageWidth: number;\n    backImageHeight: number;\n    zBuffer: Array<number>;\n}\n\nfunction createDisplay(ctx: CanvasRenderingContext2D, buffer: ArrayBuffer, width: number, height: number): Display {\n    const pixelPtr = allocate_pixels(width, height);\n    const backImageData = new Uint8ClampedArray(buffer, pixelPtr, width*height*4);\n    backImageData.fill(255);\n    const backCanvas = new OffscreenCanvas(width, height);\n    const backCtx = backCanvas.getContext(\"2d\");\n    if (backCtx === null) throw new Error(\"2D context is not supported\");\n    backCtx.imageSmoothingEnabled = false;\n    return {\n        ctx,\n        backCtx,\n        backImageData,\n        backImageWidth: width,\n        backImageHeight: height,\n        zBuffer: Array(width).fill(0),\n    };\n}\n\nfunction displaySwapBackImageData(display: Display) {\n    display.backCtx.putImageData(new ImageData(display.backImageData, display.backImageWidth), 0, 0);\n    display.ctx.drawImage(display.backCtx.canvas, 0, 0, display.ctx.canvas.width, display.ctx.canvas.height);\n}\n\ninterface Sprite {\n    image: ImageData | RGBA;\n    position: Vector2;\n    z: number;\n    scale: number;\n    cropPosition: Vector2;\n    cropSize: Vector2;\n\n    dist: number;  // Actual distance.\n    pdist: number; // Perpendicular distance.\n    t: number;     // Normalized horizontal position on the screen\n}\n\nfunction cullAndSortSprites(camera: Camera, spritePool: SpritePool, visibleSprites: Array<Sprite>) {\n    const sp = new Vector2();\n    const dir = new Vector2().setPolar(camera.direction);\n    const fov = camera.fovRight.clone().sub(camera.fovLeft);\n\n    visibleSprites.length = 0;\n    for (let i = 0; i < spritePool.length; ++i) {\n        const sprite = spritePool.items[i];\n\n        sp.copy(sprite.position).sub(camera.position);\n        const spl = sp.length();\n        if (spl <= NEAR_CLIPPING_PLANE) continue; // Sprite is too close\n        if (spl >= FAR_CLIPPING_PLANE) continue;  // Sprite is too far\n\n        const cos = sp.dot(dir)/spl;\n        // TODO: @perf the sprites that are invisible on the screen but within FOV 180° are not culled\n        // It may or may not impact the performance of renderSprites()\n        if (cos < 0) continue;  // Sprite is outside of the maximal FOV 180°\n        sprite.dist = NEAR_CLIPPING_PLANE/cos;\n        sp.norm().scale(sprite.dist).add(camera.position).sub(camera.fovLeft);\n        sprite.t = sp.length()/fov.length()*Math.sign(sp.dot(fov));\n        sprite.pdist = sprite.position.clone().sub(camera.position).dot(dir);\n\n        // TODO: I'm not sure if these checks are necessary considering the `spl <= NEAR_CLIPPING_PLANE` above\n        if (sprite.pdist < NEAR_CLIPPING_PLANE) continue;\n        if (sprite.pdist >= FAR_CLIPPING_PLANE) continue;\n\n        visibleSprites.push(sprite);\n    }\n\n    visibleSprites.sort((a, b) => b.pdist - a.pdist);\n}\n\nfunction renderSprites(display: Display, sprites: Array<Sprite>) {\n    for (let sprite of sprites) {\n        const cx = display.backImageWidth*sprite.t;\n        const cy = display.backImageHeight*0.5;\n        const maxSpriteSize = display.backImageHeight/sprite.pdist;\n        const spriteSize = maxSpriteSize*sprite.scale;\n        const x1 = Math.floor(cx - spriteSize*0.5);\n        const x2 = Math.floor(x1 + spriteSize - 1);\n        const bx1 = Math.max(0, x1);\n        const bx2 = Math.min(display.backImageWidth-1, x2);\n        const y1 = Math.floor(cy + maxSpriteSize*0.5 - maxSpriteSize*sprite.z);\n        const y2 = Math.floor(y1 + spriteSize - 1);\n        const by1 = Math.max(0, y1);\n        const by2 = Math.min(display.backImageHeight-1, y2);\n\n        if (sprite.image instanceof ImageData) {\n            const src = sprite.image.data;\n            const dest = display.backImageData;\n            for (let x = bx1; x <= bx2; ++x) {\n                if (sprite.pdist < display.zBuffer[x]) {\n                    for (let y = by1; y <= by2; ++y) {\n                        const tx = Math.floor((x - x1)/spriteSize*sprite.cropSize.x);\n                        const ty = Math.floor((y - y1)/spriteSize*sprite.cropSize.y);\n                        const srcP = ((ty + sprite.cropPosition.y)*sprite.image.width + (tx + sprite.cropPosition.x))*4;\n                        const destP = (y*display.backImageWidth + x)*4;\n                        const alpha = src[srcP + 3]/255;\n                        dest[destP + 0] = dest[destP + 0]*(1 - alpha) + src[srcP + 0]*alpha;\n                        dest[destP + 1] = dest[destP + 1]*(1 - alpha) + src[srcP + 1]*alpha;\n                        dest[destP + 2] = dest[destP + 2]*(1 - alpha) + src[srcP + 2]*alpha;\n                    }\n                }\n            }\n        } else if (sprite.image instanceof RGBA) {\n            const dest = display.backImageData;\n            for (let x = bx1; x <= bx2; ++x) {\n                if (sprite.pdist < display.zBuffer[x]) {\n                    for (let y = by1; y <= by2; ++y) {\n                        const destP = (y*display.backImageWidth + x)*4;\n                        const alpha = sprite.image.a;\n                        dest[destP + 0] = dest[destP + 0]*(1 - alpha) + sprite.image.r*255*alpha;\n                        dest[destP + 1] = dest[destP + 1]*(1 - alpha) + sprite.image.g*255*alpha;\n                        dest[destP + 2] = dest[destP + 2]*(1 - alpha) + sprite.image.b*255*alpha;\n                    }\n                }\n            }\n        }\n    }\n}\n\nfunction pushSprite(spritePool: SpritePool, image: RGBA | ImageData, position: Vector2, z: number, scale: number, cropPosition?: Vector2, cropSize?: Vector2) {\n    if (spritePool.length >= spritePool.items.length) {\n        spritePool.items.push({\n            image,\n            position: new Vector2(),\n            z,\n            scale,\n            pdist: 0,\n            dist: 0,\n            t: 0,\n            cropPosition: new Vector2(),\n            cropSize: new Vector2(),\n        })\n    }\n\n    const last = spritePool.length;\n\n    spritePool.items[last].image = image;\n    spritePool.items[last].position.copy(position);\n    spritePool.items[last].z = z;\n    spritePool.items[last].scale = scale;\n    spritePool.items[last].pdist = 0;\n    spritePool.items[last].dist = 0;\n    spritePool.items[last].t = 0;\n\n    if (image instanceof ImageData) {\n        if (cropPosition === undefined) {\n            spritePool.items[last].cropPosition.set(0, 0);\n        } else {\n            spritePool.items[last].cropPosition.copy(cropPosition);\n        }\n        if (cropSize === undefined) {\n            spritePool.items[last]\n                .cropSize\n                .set(image.width, image.height)\n                .sub(spritePool.items[last].cropPosition);\n        } else {\n            spritePool.items[last].cropSize.copy(cropSize);\n        }\n    } else {\n        spritePool.items[last].cropPosition.set(0, 0);\n        spritePool.items[last].cropSize.set(0, 0);\n    }\n\n    spritePool.length += 1;\n}\n\nfunction updateCamera(player: Player, camera: Camera) {\n    const halfFov = FOV*0.5;\n    const fovLen = NEAR_CLIPPING_PLANE/Math.cos(halfFov);\n    camera.position.copy(player.position);\n    camera.direction = player.direction;\n    camera.fovLeft.setPolar(camera.direction-halfFov, fovLen).add(camera.position);\n    camera.fovRight.setPolar(camera.direction+halfFov, fovLen).add(camera.position);\n}\n\nfunction spriteOfItemKind(itemKind: common.ItemKind, assets: Assets): ImageData {\n    switch (itemKind) {\n    case common.ItemKind.Key: return assets.keyImageData;\n    case common.ItemKind.Bomb: return assets.bombImageData;\n    default: return assets.nullImageData;\n    }\n}\n\nfunction updateItems(ws: WebSocket, spritePool: SpritePool, time: number, me: Player, items: Array<common.Item>, assets: Assets) {\n    // Rendering the items as sprites\n    for (let item of items) {\n        if (item.alive) {\n            pushSprite(spritePool, spriteOfItemKind(item.kind, assets), item.position, 0.25 + ITEM_AMP - ITEM_AMP*Math.sin(ITEM_FREQ*Math.PI*time + item.position.x + item.position.y), 0.25);\n        }\n    }\n\n    // Offline mode. Updating items state without asking the server.\n    if (ws.readyState != WebSocket.OPEN) {\n        for (let item of items) {\n            if (common.collectItem(me, item)) {\n                playSound(assets.itemPickupSound, me.position, item.position);\n            }\n        }\n    }\n}\n\ninterface Particle {\n    lifetime: number,\n    position: Vector3,\n    velocity: Vector3,\n}\n\nfunction allocateParticles(capacity: number): Array<Particle> {\n    let bomb: Array<Particle> = []\n    for (let i = 0; i < capacity; ++i) {\n        bomb.push({\n            position: new Vector3(),\n            velocity: new Vector3(),\n            lifetime: 0,\n        })\n    }\n    return bomb\n}\n\nfunction updateParticles(spritePool: SpritePool, deltaTime: number, scene: Scene, particles: Array<Particle>) {\n    for (let particle of particles) {\n        if (particle.lifetime > 0) {\n            particle.lifetime -= deltaTime;\n            particle.velocity.z -= common.BOMB_GRAVITY*deltaTime;\n\n            const nx = particle.position.x + particle.velocity.x*deltaTime;\n            const ny = particle.position.y + particle.velocity.y*deltaTime;\n            if (sceneGetTile(scene, new Vector2(nx, ny))) {\n                const dx = Math.abs(Math.floor(particle.position.x) - Math.floor(nx));\n                const dy = Math.abs(Math.floor(particle.position.y) - Math.floor(ny));\n\n                if (dx > 0) particle.velocity.x *= -1;\n                if (dy > 0) particle.velocity.y *= -1;\n                particle.velocity.scale(PARTICLE_DAMP);\n            } else {\n                particle.position.x = nx;\n                particle.position.y = ny;\n            }\n\n            const nz = particle.position.z + particle.velocity.z*deltaTime;\n            if (nz < PARTICLE_SCALE || nz > 1.0) {\n                particle.velocity.z *= -1\n                particle.velocity.scale(PARTICLE_DAMP);\n            } else {\n                particle.position.z = nz;\n            }\n\n            if (particle.lifetime > 0) {\n                pushSprite(spritePool, PARTICLE_COLOR, new Vector2(particle.position.x, particle.position.y), particle.position.z, PARTICLE_SCALE)\n            }\n        }\n    }\n}\n\nfunction emitParticle(source: Vector3, particles: Array<Particle>) {\n    for (let particle of particles) {\n        if (particle.lifetime <= 0) {\n            particle.lifetime = PARTICLE_LIFETIME;\n            particle.position.copy(source);\n            const angle = Math.random()*2*Math.PI;\n            particle.velocity.x = Math.cos(angle);\n            particle.velocity.y = Math.sin(angle);\n            particle.velocity.z = Math.random()*0.5 + 0.5;\n            particle.velocity.scale(PARTICLE_MAX_SPEED*Math.random());\n            break;\n        }\n    }\n}\n\nfunction playSound(sound: HTMLAudioElement, playerPosition: Vector2, objectPosition: Vector2) {\n    const maxVolume = 1;\n    const distanceToPlayer = objectPosition.distanceTo(playerPosition);\n    sound.volume = clamp(maxVolume / distanceToPlayer, 0.0, 1.0);\n    sound.currentTime = 0;\n    sound.play();\n}\n\nfunction explodeBomb(bomb: common.Bomb, player: Player, assets: Assets, particles: Array<Particle>) {\n    playSound(assets.bombBlastSound, player.position, bomb.position.clone2());\n    for (let i = 0; i < BOMB_PARTICLE_COUNT; ++i) {\n        emitParticle(bomb.position, particles);\n    }\n}\n\nfunction updateBombs(ws: WebSocket, spritePool: SpritePool, player: Player, bombs: Array<common.Bomb>, particles: Array<Particle>, scene: Scene, deltaTime: number, assets: Assets) {\n    for (let bomb of bombs) {\n        if (bomb.lifetime > 0) {\n            pushSprite(spritePool, assets.bombImageData, new Vector2(bomb.position.x, bomb.position.y), bomb.position.z, common.BOMB_SCALE)\n            if (common.updateBomb(bomb, scene, deltaTime)) {\n                playSound(assets.bombRicochetSound, player.position, bomb.position.clone2());\n            }\n\n            if (ws.readyState != WebSocket.OPEN && bomb.lifetime <= 0) {\n                explodeBomb(bomb, player, assets, particles)\n            }\n        }\n    }\n}\n\ninterface Assets {\n    wallImageData: ImageData,\n    keyImageData: ImageData,\n    bombImageData: ImageData,\n    playerImageData: ImageData,\n    nullImageData: ImageData,\n    bombRicochetSound: HTMLAudioElement,\n    itemPickupSound: HTMLAudioElement,\n    bombBlastSound: HTMLAudioElement\n}\n\ninterface Game {\n    camera: Camera,\n    ws: WebSocket,\n    me: Player,\n    players: Map<number, Player>,\n    visibleSprites: Array<Sprite>,\n    spritePool: SpritePool,\n    particles: Array<Particle>,\n    assets: Assets,\n    ping: number,\n    dts: number[],\n    level: common.Level,\n}\n\nasync function loadImage(url: string): Promise<HTMLImageElement> {\n    const image = new Image();\n    image.src = url;\n    return new Promise((resolve, reject) => {\n        image.onload = () => resolve(image);\n        image.onerror = reject;\n    });\n}\n\nasync function loadImageData(url: string): Promise<ImageData> {\n    const image = await loadImage(url);\n    const canvas = new OffscreenCanvas(image.width, image.height);\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx === null) throw new Error(\"2d canvas is not supported\");\n    ctx.drawImage(image, 0, 0);\n    return ctx.getImageData(0, 0, image.width, image.height);\n}\n\nasync function createGame(): Promise<Game> {\n    const [wallImageData, keyImageData, bombImageData, playerImageData, nullImageData] = await Promise.all([\n        loadImageData(\"images/custom/wall.png\"),\n        loadImageData(\"images/custom/key.png\"),\n        loadImageData(\"images/custom/bomb.png\"),\n        loadImageData(\"images/custom/player.png\"),\n        loadImageData(\"images/custom/null.png\"),\n    ]);\n    const itemPickupSound = new Audio(\"sounds/bomb-pickup.ogg\");\n    const bombRicochetSound = new Audio(\"sounds/ricochet.wav\");\n    const bombBlastSound = new Audio(\"sounds/blast.ogg\");\n    const assets = {\n        wallImageData,\n        keyImageData,\n        bombImageData,\n        playerImageData,\n        nullImageData,\n        bombRicochetSound,\n        itemPickupSound,\n        bombBlastSound,\n    }\n\n    const particles = allocateParticles(1000);\n    const visibleSprites: Array<Sprite> = [];\n    const spritePool = createSpritePool();\n\n    const players = new Map<number, Player>();\n\n    const camera: Camera = {\n        position: new Vector2(),\n        direction: 0,\n        fovLeft: new Vector2(),\n        fovRight: new Vector2(),\n    };\n    const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n    const ws = new WebSocket(`${protocol}//${window.location.hostname}:${SERVER_PORT}`);\n    // HACK: This application is deployed to GitHub Pages for the demo\n    // purposes. Unfortunately, GitHub Pages only allow hosting static\n    // assets, so we can only operate in Offline Mode. At the same\n    // time, tsoding.github.io accepts WebSocket connection on the\n    // port 6970 and later times out on the shandshake which results\n    // in the client displaying \"Connecting...\" for the whole time,\n    // which does not look good in the demo. So if we are on\n    // tsoding.github.io we just instantly close the connection.\n    if (window.location.hostname === 'tsoding.github.io') ws.close();\n    const me = {\n        id: 0,\n        position: new Vector2(),\n        direction: 0,\n        moving: 0,\n        hue: 0,\n    };\n    const level = common.createLevel();\n    // TODO: make a better initialization of the items on client\n    for (const item of level.items) item.alive = false;\n    const game: Game = {\n        camera, ws, me, ping: 0, players, particles, assets, spritePool, visibleSprites, dts: [],\n        level\n    };\n\n    ws.binaryType = 'arraybuffer';\n    ws.addEventListener(\"close\", (event) => {\n        console.log(\"WEBSOCKET CLOSE\", event)\n        game.players.clear();\n    });\n    ws.addEventListener(\"error\", (event) => {\n        // TODO: reconnect on errors\n        console.log(\"WEBSOCKET ERROR\", event)\n    });\n    ws.addEventListener(\"message\", (event) => {\n        // console.log('Received message', event);\n        if (!(event.data instanceof ArrayBuffer)) {\n            console.error(\"Received bogus-amogus message from server. Expected binary data\", event);\n            ws?.close();\n        }\n        const view = new DataView(event.data);\n        if (common.HelloStruct.verify(view)) {\n            game.me = {\n                id: common.HelloStruct.id.read(view),\n                position: new Vector2(common.HelloStruct.x.read(view), common.HelloStruct.y.read(view)),\n                direction: common.HelloStruct.direction.read(view),\n                moving: 0,\n                hue: common.HelloStruct.hue.read(view)/256*360,\n            }\n            players.set(game.me.id, game.me)\n        } else if (common.PlayersJoinedHeaderStruct.verify(view)) {\n            const count = common.PlayersJoinedHeaderStruct.count(view);\n            for (let i = 0; i < count; ++i) {\n                const playerView = new DataView(event.data, common.PlayersJoinedHeaderStruct.size + i*common.PlayerStruct.size, common.PlayerStruct.size);\n                const id = common.PlayerStruct.id.read(playerView);\n                const player = players.get(id);\n                if (player !== undefined) {\n                    player.position.x = common.PlayerStruct.x.read(playerView);\n                    player.position.y = common.PlayerStruct.y.read(playerView);\n                    player.direction = common.PlayerStruct.direction.read(playerView);\n                    player.moving = common.PlayerStruct.moving.read(playerView);\n                    player.hue = common.PlayerStruct.hue.read(playerView)/256*360;\n                } else {\n                    const x = common.PlayerStruct.x.read(playerView);\n                    const y = common.PlayerStruct.y.read(playerView);\n                    players.set(id, {\n                        id,\n                        position: new Vector2(x, y),\n                        direction: common.PlayerStruct.direction.read(playerView),\n                        moving: common.PlayerStruct.moving.read(playerView),\n                        hue: common.PlayerStruct.hue.read(playerView)/256*360,\n                    });\n                }\n            }\n        } else if (common.PlayersLeftHeaderStruct.verify(view)) {\n            const count = common.PlayersLeftHeaderStruct.count(view);\n            for (let i = 0; i < count; ++i) {\n                const id = common.PlayersLeftHeaderStruct.items(i).id.read(view);\n                players.delete(id);\n            }\n        } else if (common.PlayersMovingHeaderStruct.verify(view)) {\n            const count = common.PlayersMovingHeaderStruct.count(view);\n            for (let i = 0; i < count; ++i) {\n                const playerView = new DataView(event.data, common.PlayersMovingHeaderStruct.size + i*common.PlayerStruct.size, common.PlayerStruct.size);\n\n                const id = common.PlayerStruct.id.read(playerView);\n                const player = players.get(id);\n                if (player === undefined) {\n                    console.error(`Received bogus-amogus message from server. We don't know anything about player with id ${id}`)\n                    ws?.close();\n                    return;\n                }\n                player.moving = common.PlayerStruct.moving.read(playerView);\n                player.position.x = common.PlayerStruct.x.read(playerView);\n                player.position.y = common.PlayerStruct.y.read(playerView);\n                player.direction = common.PlayerStruct.direction.read(playerView);\n            }\n        } else if (common.PongStruct.verify(view)) {\n            game.ping = performance.now() - common.PongStruct.timestamp.read(view);\n        } else if (common.ItemCollectedStruct.verify(view)) {\n            const index = common.ItemCollectedStruct.index.read(view);\n            if (!(0 <= index && index < game.level.items.length)) {\n                console.error(`Received bogus-amogus ItemCollected message from server. Invalid index ${index}`);\n                ws?.close();\n                return;\n            }\n            if (game.level.items[index].alive) {\n                game.level.items[index].alive = false;\n                playSound(assets.itemPickupSound, game.me.position, game.level.items[index].position);\n            }\n        } else if (common.ItemSpawnedStruct.verify(view)) {\n            const index = common.ItemSpawnedStruct.index.read(view);\n            if (!(0 <= index && index < game.level.items.length)) {\n                console.error(`Received bogus-amogus ItemSpawned message from server. Invalid index ${index}`);\n                ws?.close();\n                return;\n            }\n            game.level.items[index].alive = true;\n            game.level.items[index].kind = common.ItemSpawnedStruct.itemKind.read(view);\n            game.level.items[index].position.x = common.ItemSpawnedStruct.x.read(view);\n            game.level.items[index].position.y = common.ItemSpawnedStruct.y.read(view);\n        } else if (common.BombSpawnedStruct.verify(view)) {\n            const index = common.BombSpawnedStruct.index.read(view);\n            if (!(0 <= index && index < game.level.bombs.length)) {\n                console.error(`Received bogus-amogus BombSpawned message from server. Invalid index ${index}`);\n                ws?.close();\n                return;\n            }\n            game.level.bombs[index].lifetime = common.BombSpawnedStruct.lifetime.read(view);\n            game.level.bombs[index].position.x = common.BombSpawnedStruct.x.read(view);\n            game.level.bombs[index].position.y = common.BombSpawnedStruct.y.read(view);\n            game.level.bombs[index].position.z = common.BombSpawnedStruct.z.read(view);\n            game.level.bombs[index].velocity.x = common.BombSpawnedStruct.dx.read(view);\n            game.level.bombs[index].velocity.y = common.BombSpawnedStruct.dy.read(view);\n            game.level.bombs[index].velocity.z = common.BombSpawnedStruct.dz.read(view);\n        } else if (common.BombExplodedStruct.verify(view)) {\n            const index = common.BombExplodedStruct.index.read(view);\n            if (!(0 <= index && index < game.level.bombs.length)) {\n                console.error(`Received bogus-amogus BombExploded message from server. Invalid index ${index}`);\n                ws?.close();\n                return;\n            }\n            game.level.bombs[index].lifetime = 0.0;\n            game.level.bombs[index].position.x = common.BombExplodedStruct.x.read(view);\n            game.level.bombs[index].position.y = common.BombExplodedStruct.y.read(view);\n            game.level.bombs[index].position.z = common.BombExplodedStruct.z.read(view);\n            explodeBomb(level.bombs[index], me, assets, particles);\n        } else {\n            console.error(\"Received bogus-amogus message from server.\", view)\n            ws?.close();\n        }\n    });\n    ws.addEventListener(\"open\", (event) => {\n        console.log(\"WEBSOCKET OPEN\", event)\n    });\n\n    return game;\n}\n\nfunction spriteAngleIndex(cameraPosition: Vector2, entity: Player): number {\n    return Math.floor(properMod(properMod(entity.direction, 2*Math.PI) - properMod(entity.position.clone().sub(cameraPosition).angle(), 2*Math.PI) - Math.PI + Math.PI/8, 2*Math.PI)/(2*Math.PI)*SPRITE_ANGLES_COUNT);\n}\n\nfunction renderGame(display: Display, deltaTime: number, time: number, game: Game) {\n    resetSpritePool(game.spritePool);\n\n    game.players.forEach((player) => {\n        if (player !== game.me) updatePlayer(player, game.level.scene, deltaTime)\n    });\n    updatePlayer(game.me, game.level.scene, deltaTime);\n    updateCamera(game.me, game.camera);\n    updateItems(game.ws, game.spritePool, time, game.me, game.level.items, game.assets);\n    updateBombs(game.ws, game.spritePool, game.me, game.level.bombs, game.particles, game.level.scene, deltaTime, game.assets);\n    updateParticles(game.spritePool, deltaTime, game.level.scene, game.particles)\n\n    game.players.forEach((player) => {\n        if (player !== game.me) {\n            const index = spriteAngleIndex(game.camera.position, player);\n            pushSprite(game.spritePool, game.assets.playerImageData, player.position, 1, 1, new Vector2(55*index, 0), new Vector2(55, 55));\n        }\n    })\n\n    render_floor_and_ceiling(game.camera.position.x, game.camera.position.y, properMod(game.camera.direction, 2*Math.PI));\n    renderWalls(display, game.assets, game.camera, game.level.scene);\n    cullAndSortSprites(game.camera, game.spritePool, game.visibleSprites);\n    renderSprites(display, game.visibleSprites);\n    displaySwapBackImageData(display);\n\n    if (MINIMAP) renderMinimap(display.ctx, game.camera, game.me, game.level.scene, game.spritePool, game.visibleSprites);\n    renderDebugInfo(display.ctx, deltaTime, game);\n}\n\nfunction make_environment(...envs: any): any {\n    return new Proxy(envs, {\n        get(_target, prop, _receiver) {\n            for (let env of envs) {\n                if (env.hasOwnProperty(prop)) {\n                    return env[prop];\n                }\n            }\n            return (...args: any) => {\n                throw new Error(`NOT IMPLEMENTED: ${String(prop)} ${args}`)\n            }\n        }\n    });\n}\n\n\nlet allocate_pixels: (width: number, height: number) => number;\nlet render_floor_and_ceiling: (x: number, y: number, direction: number) => void;\n\n(async () => {\n    const gameCanvas = document.getElementById(\"game\") as (HTMLCanvasElement | null);\n    if (gameCanvas === null) throw new Error(\"No canvas with id `game` is found\");\n    const factor = 80;\n    gameCanvas.width = 16*factor;\n    gameCanvas.height = 9*factor;\n    const ctx = gameCanvas.getContext(\"2d\");\n    if (ctx === null) throw new Error(\"2D context is not supported\");\n    ctx.imageSmoothingEnabled = false;\n\n    // WASM initialization\n    const {exports} = await createRenderer({\n        env: make_environment({\n            \"fmodf\": (x: number, y: number) => x%y,\n            \"fminf\": Math.min,\n            \"fmaxf\": Math.max,\n        })\n    });\n    const memory = exports.memory as WebAssembly.Memory;\n    allocate_pixels = exports.allocate_pixels as any;\n    render_floor_and_ceiling = exports.render_floor_and_ceiling as any;\n\n    // TODO: bring hotreloading back\n    // TODO: hot reloading should not break if the game crashes\n\n    const game = await createGame();\n    const display = createDisplay(ctx, memory.buffer, SCREEN_WIDTH, SCREEN_HEIGHT);\n\n    window.addEventListener(\"keydown\", (e) => {\n        if (!e.repeat) {\n            const direction = CONTROL_KEYS[e.code];\n            if (direction !== undefined) {\n                if (game.ws.readyState === WebSocket.OPEN) {\n                    const view = new DataView(new ArrayBuffer(common.AmmaMovingStruct.size));\n                    common.AmmaMovingStruct.kind.write(view, common.MessageKind.AmmaMoving);\n                    common.AmmaMovingStruct.start.write(view, 1);\n                    common.AmmaMovingStruct.direction.write(view, direction);\n                    game.ws.send(view);\n                } else {\n                    game.me.moving |= 1<<direction;\n                }\n            } else if (e.code === 'Space') {\n                if (game.ws.readyState === WebSocket.OPEN) {\n                    const view = new DataView(new ArrayBuffer(common.AmmaThrowingStruct.size));\n                    common.AmmaThrowingStruct.kind.write(view, common.MessageKind.AmmaThrowing);\n                    game.ws.send(view);\n                } else {\n                    common.throwBomb(game.me, game.level.bombs);\n                }\n            }\n        }\n    });\n    // TODO: When the window loses the focus, reset all the controls\n    window.addEventListener(\"keyup\", (e) => {\n        if (!e.repeat) {\n            const direction = CONTROL_KEYS[e.code];\n            if (direction !== undefined) {\n                if (game.ws.readyState === WebSocket.OPEN) {\n                    const view = new DataView(new ArrayBuffer(common.AmmaMovingStruct.size));\n                    common.AmmaMovingStruct.kind.write(view, common.MessageKind.AmmaMoving);\n                    common.AmmaMovingStruct.start.write(view, 0);\n                    common.AmmaMovingStruct.direction.write(view, direction);\n                    game.ws.send(view);\n                } else {\n                    game.me.moving &= ~(1<<direction);\n                }\n            }\n        }\n    });\n\n    const PING_COOLDOWN = 60;\n    let prevTimestamp = 0;\n    let pingCooldown = PING_COOLDOWN;\n    const frame = (timestamp: number) => {\n        const deltaTime = (timestamp - prevTimestamp)/1000;\n        const time = timestamp/1000;\n        prevTimestamp = timestamp;\n        renderGame(display, deltaTime, time, game);\n        if (game.ws.readyState == WebSocket.OPEN) {\n            pingCooldown -= 1;\n            if (pingCooldown <= 0) {\n                const view = new DataView(new ArrayBuffer(common.PingStruct.size));\n                common.PingStruct.kind.write(view, common.MessageKind.Ping);\n                common.PingStruct.timestamp.write(view, performance.now());\n                game.ws.send(view);\n                pingCooldown = PING_COOLDOWN;\n            }\n        }\n        window.requestAnimationFrame(frame);\n    }\n    window.requestAnimationFrame((timestamp) => {\n        prevTimestamp = timestamp;\n        window.requestAnimationFrame(frame);\n    });\n})();\n// TODO: Hot reload assets\n// TODO: Load assets asynchronously\n//   While a texture is loading, replace it with a color tile.\n// TODO: Mobile controls\n// TODO: \"magnet\" items into the player\n// TODO: Blast particles should fade out as they age\n// TODO: Bomb collision should take into account its size\n// TODO: Try lighting with normal maps that come with some of the assets\n// TODO: Try cel shading the walls (using normals and stuff)\n// TODO: sound don't mix properly\n//   Right now same sounds are just stopped and replaced instantly. Which generally does not sound good.\n//   We need to fix them properly\n// TODO: consider looking into Web Audio API https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API\n"],"names":["Moving","MessageKind","ItemKind","common.Moving","common.ItemKind","common.collectItem","common.BOMB_GRAVITY","common.BOMB_SCALE","common.updateBomb","common.createLevel","common.HelloStruct","common.PlayersJoinedHeaderStruct","common.PlayerStruct","common.PlayersLeftHeaderStruct","common.PlayersMovingHeaderStruct","common.PongStruct","common.ItemCollectedStruct","common.ItemSpawnedStruct","common.BombSpawnedStruct","common.BombExplodedStruct","common.AmmaMovingStruct","common.MessageKind","common.AmmaThrowingStruct","common.throwBomb","common.PingStruct"],"mappings":"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"}